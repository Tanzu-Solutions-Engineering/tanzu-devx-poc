name: 02_Deploy_POC_Components

# Controls when the workflow will run

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CLUSTER_RESOURCE_GROUP: MorganStanleyPOC
  CLUSTER_NAME: TanzuCluster
  DOMAIN_NAME: ms.hyan.us
  AZURE_STORAGE_ACCOUNT_NAME: msharbor
  KP_CLI_LINUX_RELEASE: https://network.pivotal.io/api/v2/products/build-service/releases/925788/product_files/1000629/download
  TBS_VERSION: 1.2.2
  TBS_DEPENDENCIES_VERSION: 100.0.150
  TBS_DEPENDENCIES: https://network.pivotal.io/api/v2/products/tbs-dependencies/releases/943744/product_files/1022067/download
  ACC_VERSION: 0.2.0
  ACC_SAMPLE_FILE: sample-accelerators-0-2.yaml
  ACC_SAMPLE_DOWNLOAD: https://network.pivotal.io/api/v2/products/app-accelerator/releases/943731/product_files/1022094/download
#   ACC_SAMPLE_DOWNLOAD: https://network.pivotal.io/api/v2/products/app-accelerator/releases/965559/product_files/1049989/download

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the latest code from main.
      uses: actions/checkout@main

    - name: Install Kubectl Tool
      uses: azure/setup-kubectl@v1
      id: install_kubectl

    - name: Install Helm Tool
      uses: azure/setup-helm@v1
      id: install_helm

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_ACCESS }}'

    - name: Set the target Azure Kubernetes Service (AKS) cluster
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_ACCESS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

    - name: Add and Update Helm repos
      run: |
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo add jetstack https://charts.jetstack.io
        helm repo update

    - name: Install Carvel CLI tools (kapp, ytt, kbld, imgpkg, and vendir)
      run: |
        wget -O- https://carvel.dev/install.sh | bash

    - name: Install Kpack CLI (kp)
      run: |
        wget -O kp --header="Authorization: Token ${{ secrets.TANZU_NETWORK_API_TOKEN }}" ${{ env.KP_CLI_LINUX_RELEASE }} && chmod +x kp && sudo mv kp /usr/local/bin
#     - name: Install Tanzu Build Service
#       run: |

#         # Relocate Images to a private registry
#         docker login registry.${{ env.DOMAIN_NAME }} -u '${{ secrets.HARBOR_USERNAME }}' -p '${{ secrets.HARBOR_PASSWORD }}'
#         docker login registry.pivotal.io -u '${{ secrets.TANZU_NETWORK_USERNAME }}' -p '${{ secrets.TANZU_NETWORK_PASSWORD }}'
#         imgpkg copy -b "registry.pivotal.io/build-service/bundle:${{ env.TBS_VERSION }}" --to-repo registry.${{ env.DOMAIN_NAME }}/library/build-service

#         # Pull the Tanzu Build Service bundle image locally
#         imgpkg pull -b "registry.${{ env.DOMAIN_NAME }}/library/build-service:${{ env.TBS_VERSION }}" -o /tmp/bundle

#         curl https://letsencrypt.org/certs/lets-encrypt-r3-cross-signed.pem -o /tmp/letsencrypt-ca.crt

#         ytt -f /tmp/bundle/values.yaml \
#             -f /tmp/bundle/config/ \
#             -f /tmp/letsencrypt-ca.crt \
#             -v docker_repository='registry.${{ env.DOMAIN_NAME }}/library/build-service' \
#             -v docker_username='${{ secrets.HARBOR_USERNAME }}' \
#             -v docker_password='${{ secrets.HARBOR_PASSWORD }}' \
#             | kbld -f /tmp/bundle/.imgpkg/images.yml -f- \
#             | kapp deploy -a tanzu-build-service -f- -y

#     - name: Import Tanzu Build Service Dependencies
#       run: |
#         DESCRIPTOR_FILE="descriptor-${{ env.TBS_DEPENDENCIES_VERSION }}.yaml"
#         echo $DESCRIPTOR_FILE
#         wget -O $DESCRIPTOR_FILE --header="Authorization: Token ${{ secrets.TANZU_NETWORK_API_TOKEN }}" ${{ env.TBS_DEPENDENCIES }}
#         kp import -f $DESCRIPTOR_FILE  --registry-ca-cert-path /tmp/letsencrypt-ca.crt
#     - name: Verify TBS Installation
#       run: kp clusterbuilder list

    - name: Install Application Accelerator
      run: |
        # Install full Flux2 system
        kapp deploy -a flux -f https://github.com/fluxcd/flux2/releases/download/v0.15.0/install.yaml -y

        # Pull and extract the installation bundle
        docker login registry.pivotal.io -u '${{ secrets.TANZU_NETWORK_USERNAME }}' -p '${{ secrets.TANZU_NETWORK_PASSWORD }}'
        imgpkg pull -b registry.pivotal.io/app-accelerator/acc-install-bundle:${{ env.ACC_VERSION }} \
          -o /tmp/acc-install-bundle
        kubectl create namespace accelerator-system --dry-run=client -o yaml  | kubectl apply -f -
        export acc_registry__server=registry.pivotal.io
        export acc_registry__username='${{ secrets.TANZU_NETWORK_USERNAME }}'
        export acc_registry__password='${{ secrets.TANZU_NETWORK_PASSWORD }}'
        
        kubectl create secret \
          docker-registry acc-image-regcred -n accelerator-system \
          --docker-server=registry.pivotal.io \
          --docker-username='${{ secrets.TANZU_NETWORK_USERNAME }}' \
          --docker-password='${{ secrets.TANZU_NETWORK_PASSWORD }}'

        ytt -f /tmp/acc-install-bundle/config -f /tmp/acc-install-bundle/values.yml --data-values-env acc  \
          | kbld -f /tmp/acc-install-bundle/.imgpkg/images.yml -f- \
          | kapp deploy -y -n accelerator-system -a accelerator -f- -y

        kubectl apply -f https://raw.githubusercontent.com/sample-accelerators/metadata/main/new-accelerator.yaml
                
    - name: Install OOTB Application Accelerator Samples
      run: |
        wget -O $${{ env.ACC_SAMPLE_FILE }} --header="Authorization: Token ${{ secrets.TANZU_NETWORK_API_TOKEN }}" ${{ env.ACC_SAMPLE_DOWNLOAD }}
        kubectl apply -f $${{ env.ACC_SAMPLE_FILE }}

